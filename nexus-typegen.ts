/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ProductsFilter: "active" | "all"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Product: { // root type
    active: boolean; // Boolean!
    category?: string | null; // String
    color?: string | null; // String
    description?: string | null; // String
    id: number; // Int!
    title: string; // String!
  }
  ProductsPayload: { // root type
    count?: number | null; // Int
    data?: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    hasMore?: boolean | null; // Boolean
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name?: string | null; // String
    role?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    activateProduct: NexusGenRootTypes['Product'] | null; // Product
    createProduct: NexusGenRootTypes['Product'] | null; // Product
    createUser: NexusGenRootTypes['User'] | null; // User
    makeAdmin: NexusGenRootTypes['User'] | null; // User
  }
  Product: { // field return type
    active: boolean; // Boolean!
    category: string | null; // String
    color: string | null; // String
    description: string | null; // String
    id: number; // Int!
    owner: NexusGenRootTypes['User']; // User!
    title: string; // String!
  }
  ProductsPayload: { // field return type
    count: number | null; // Int
    data: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    hasMore: boolean | null; // Boolean
  }
  Query: { // field return type
    product: NexusGenRootTypes['Product'] | null; // Product
    products: NexusGenRootTypes['ProductsPayload'] | null; // ProductsPayload
    user: NexusGenRootTypes['User'] | null; // User
    userProfile: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    name: string | null; // String
    products: NexusGenRootTypes['Product'][]; // [Product!]!
    role: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    activateProduct: 'Product'
    createProduct: 'Product'
    createUser: 'User'
    makeAdmin: 'User'
  }
  Product: { // field return type name
    active: 'Boolean'
    category: 'String'
    color: 'String'
    description: 'String'
    id: 'Int'
    owner: 'User'
    title: 'String'
  }
  ProductsPayload: { // field return type name
    count: 'Int'
    data: 'Product'
    hasMore: 'Boolean'
  }
  Query: { // field return type name
    product: 'Product'
    products: 'ProductsPayload'
    user: 'User'
    userProfile: 'User'
    users: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
    products: 'Product'
    role: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    activateProduct: { // args
      id: number; // Int!
      status: boolean; // Boolean!
    }
    createProduct: { // args
      active: boolean; // Boolean!
      category: string; // String!
      color: string; // String!
      description: string; // String!
      ownerId: number; // Int!
      title: string; // String!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
    }
    makeAdmin: { // args
      id: number; // Int!
      isAdmin: boolean; // Boolean!
    }
  }
  Query: {
    product: { // args
      id: number; // Int!
    }
    products: { // args
      filter?: NexusGenEnums['ProductsFilter'] | null; // ProductsFilter
      first: number; // Int!
      searchBy?: string | null; // String
      skip: number; // Int!
    }
    user: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}